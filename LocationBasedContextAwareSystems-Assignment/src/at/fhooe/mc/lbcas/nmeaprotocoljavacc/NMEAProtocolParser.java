/* Generated By:JavaCC: Do not edit this line. NMEAProtocolParser.java */
package at.fhooe.mc.lbcas.nmeaprotocoljavacc;

@SuppressWarnings("all")
public class NMEAProtocolParser implements NMEAProtocolParserConstants {
  public static void main(String args []) throws ParseException,TokenMgrError
  {
    NMEAProtocolParser parser = new NMEAProtocolParser(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an NEMA Protocol String expression : ");
      try
      {
        switch (parser.validate_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int validate_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      dollarcheck();
      sentenceidentifier();
      commacheck();
      timecheck();
      commacheck();
      latitudecheck();
      commacheck();
      longitudecheck();
      commacheck();
      qualitycheck();
      commacheck();
      numberOfSatellites();
      commacheck();
      horizontaldilusion();
      commacheck();
      altitude();
      commacheck();
      geoidheight();
      commacheck();
      commacheck();
      checksum();
      jj_consume_token(28);
    {if (true) return 0;}
      break;
    case 28:
      jj_consume_token(28);
    {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void dollarcheck() throws ParseException {
    jj_consume_token(DOLLAR);
  }

  static final public void sentenceidentifier() throws ParseException {
    jj_consume_token(GTOKEN);
    jj_consume_token(PTOKEN);
    jj_consume_token(GTOKEN);
    jj_consume_token(GTOKEN);
    jj_consume_token(ATOKEN);
  }

  static final public void commacheck() throws ParseException {
    jj_consume_token(COMMA);
  }

  static final public void timecheck() throws ParseException {
    hourcheck();
    minuteSecondscheck();
    minuteSecondscheck();
    decimalcheck();
    zerozerocheck();
  }

  static final public void hourcheck() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBERZERO:
      jj_consume_token(NUMBERZERO);
      allNumbersOneOccurrence();
      break;
    case NUMBERONE:
      jj_consume_token(NUMBERONE);
      allNumbersOneOccurrence();
      break;
    case NUMBERTWO:
      jj_consume_token(NUMBERTWO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBERZERO:
      case NUMBERONE:
      case NUMBERTWO:
      case NUMBERTHREE:
      case NUMBERFOUR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBERZERO:
          jj_consume_token(NUMBERZERO);
          break;
        case NUMBERONE:
          jj_consume_token(NUMBERONE);
          break;
        case NUMBERTWO:
          jj_consume_token(NUMBERTWO);
          break;
        case NUMBERTHREE:
          jj_consume_token(NUMBERTHREE);
          break;
        case NUMBERFOUR:
          jj_consume_token(NUMBERFOUR);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void minuteSecondscheck() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBERZERO:
      jj_consume_token(NUMBERZERO);
      allNumbersOneOccurrence();
      break;
    case NUMBERONE:
      jj_consume_token(NUMBERONE);
      allNumbersOneOccurrence();
      break;
    case NUMBERTWO:
      jj_consume_token(NUMBERTWO);
      allNumbersOneOccurrence();
      break;
    case NUMBERTHREE:
      jj_consume_token(NUMBERTHREE);
      allNumbersOneOccurrence();
      break;
    case NUMBERFOUR:
      jj_consume_token(NUMBERFOUR);
      allNumbersOneOccurrence();
      break;
    case NUMBERFIVE:
      jj_consume_token(NUMBERFIVE);
      allNumbersOneOccurrence();
      break;
    case NUMBERSIX:
      jj_consume_token(NUMBERSIX);
      jj_consume_token(NUMBERZERO);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void decimalcheck() throws ParseException {
    jj_consume_token(DECIMAL);
  }

  static final public void zerozerocheck() throws ParseException {
    jj_consume_token(NUMBERZERO);
    jj_consume_token(NUMBERZERO);
  }

  static final public void latitudecheck() throws ParseException {
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    decimalcheck();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    commacheck();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NTOKEN:
    case STOKEN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NTOKEN:
        jj_consume_token(NTOKEN);
        break;
      case STOKEN:
        jj_consume_token(STOKEN);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void longitudecheck() throws ParseException {
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    decimalcheck();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    commacheck();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WTOKEN:
    case ETOKEN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WTOKEN:
        jj_consume_token(WTOKEN);
        break;
      case ETOKEN:
        jj_consume_token(ETOKEN);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void qualitycheck() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBERONE:
    case NUMBERTWO:
    case NUMBERTHREE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBERONE:
        jj_consume_token(NUMBERONE);
        break;
      case NUMBERTWO:
        jj_consume_token(NUMBERTWO);
        break;
      case NUMBERTHREE:
        jj_consume_token(NUMBERTHREE);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void numberOfSatellites() throws ParseException {
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
  }

  static final public void horizontaldilusion() throws ParseException {
    allNumbersOneOccurrence();
    decimalcheck();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
  }

  static final public void altitude() throws ParseException {
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    decimalcheck();
    allNumbersOneOccurrence();
    commacheck();
    jj_consume_token(METER);
  }

  static final public void geoidheight() throws ParseException {
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
    decimalcheck();
    allNumbersOneOccurrence();
    commacheck();
    jj_consume_token(METER);
  }

  static final public void checksum() throws ParseException {
    jj_consume_token(STAR);
    allNumbersOneOccurrence();
    allNumbersOneOccurrence();
  }

  static final public void allNumbersOneOccurrence() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBERZERO:
    case NUMBERONE:
    case NUMBERTWO:
    case NUMBERTHREE:
    case NUMBERFOUR:
    case NUMBERFIVE:
    case NUMBERSIX:
    case NUMBERSEVEN:
    case NUMBEREIGHT:
    case NUMBERNINE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBERZERO:
        jj_consume_token(NUMBERZERO);
        break;
      case NUMBERONE:
        jj_consume_token(NUMBERONE);
        break;
      case NUMBERTWO:
        jj_consume_token(NUMBERTWO);
        break;
      case NUMBERTHREE:
        jj_consume_token(NUMBERTHREE);
        break;
      case NUMBERFOUR:
        jj_consume_token(NUMBERFOUR);
        break;
      case NUMBERFIVE:
        jj_consume_token(NUMBERFIVE);
        break;
      case NUMBERSIX:
        jj_consume_token(NUMBERSIX);
        break;
      case NUMBERSEVEN:
        jj_consume_token(NUMBERSEVEN);
        break;
      case NUMBEREIGHT:
        jj_consume_token(NUMBEREIGHT);
        break;
      case NUMBERNINE:
        jj_consume_token(NUMBERNINE);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NMEAProtocolParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000020,0x7c000,0x7c000,0x1c000,0x1fc000,0xa00,0xa00,0x1400,0x1400,0x38000,0x38000,0xffc000,0xffc000,};
   }

  /** Constructor with InputStream. */
  public NMEAProtocolParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NMEAProtocolParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NMEAProtocolParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NMEAProtocolParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NMEAProtocolParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NMEAProtocolParser(NMEAProtocolParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NMEAProtocolParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
