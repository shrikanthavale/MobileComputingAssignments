/* Generated By:JavaCC: Do not edit this line. ContextRuleParserTokenManager.java */
package at.fhooe.mc.lbcas.contextrulejavacc;
import at.fhooe.mc.lbcas.contextruleparser.*;
import java.util.*;
import java.text.*;

/** Token Manager. */
public class ContextRuleParserTokenManager implements ContextRuleParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 60:
         return jjStopAtPos(0, 6);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 62:
         return jjStopAtPos(0, 5);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8a0000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 61:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 77:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 124:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 89:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(2, 17);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x90000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 84:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(6, 20);
         break;
      case 76:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         break;
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x6800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x9000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1800L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(8, 13);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 89:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 119:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(11, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(12, 12);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 119:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(14, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(16, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 57)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 56)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 55)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 54)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if (curChar == 53)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 52)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 51)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 50)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 49)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 1:
                  if (curChar == 49)
                     kind = 25;
                  break;
               case 2:
                  if (curChar == 50)
                     kind = 26;
                  break;
               case 3:
                  if (curChar == 51)
                     kind = 27;
                  break;
               case 4:
                  if (curChar == 52)
                     kind = 28;
                  break;
               case 5:
                  if (curChar == 53)
                     kind = 29;
                  break;
               case 6:
                  if (curChar == 54)
                     kind = 30;
                  break;
               case 7:
                  if (curChar == 55)
                     kind = 31;
                  break;
               case 8:
                  if (curChar == 56)
                     kind = 32;
                  break;
               case 9:
                  if (curChar == 57)
                     kind = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\76", "\74", "\75\75", "\41\75", "\46\46", 
"\174\174", "\160\157\163\151\164\151\157\156\137\156\157\167", 
"\144\141\171\156\151\147\150\164\137\155\157\144\145", "\165\163\145\162\137\155\157\144\145", "\164\151\155\145\137\156\157\167", 
"\164\145\155\160\145\162\141\164\165\162\145\137\156\157\167", "\125\116\111\126\105\122\123\111\124\131\137\103\101\115\120\125\123", 
"\104\101\131", "\116\111\107\110\124", "\104\122\111\126\111\116\107", 
"\127\101\114\113\111\116\107", "\101\115", "\120\115", "\104\105\103\111\115\101\114", null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3ffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[10];
static private final int[] jjstateSet = new int[20];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ContextRuleParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ContextRuleParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                System.out.println("GREATER THAN OPERATOR \u005c" > \u005c" ");
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                System.out.println("LESS THAN OPERATOR \u005c" < \u005c" ");
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                System.out.println("EQUAL OPERATOR \u005c" == \u005c" ");
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                System.out.println("NOT EQUAL OPERATOR \u005c" != \u005c" ");
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                System.out.println("NOT EQUAL OPERATOR \u005c" && \u005c" ");
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                System.out.println("NOT EQUAL OPERATOR \u005c" || \u005c" ");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
        System.out.println("Current Position");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                System.out.println("Day Night Mode");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                System.out.println("User Mode");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                System.out.println("Time now");
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                System.out.println("Temperature Now");
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
        System.out.println("Position : UNIVERSITY_CAMPUS");
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
        System.out.println("Day Night Mode is : DAY");
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
        System.out.println("Day Night Mode is : NIGHT");
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
        System.out.println("User Mode : DRIVING");
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
        System.out.println("User Mode : WALKING");
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
        System.out.println("Time Unit: AM");
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
        System.out.println("Time Unit: PM");
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
        System.out.println("Decimal : \u005c" . \u005c" ");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
