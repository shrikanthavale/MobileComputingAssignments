/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(ContextRuleParser)package at.fhooe.mc.lbcas.contextrulejavacc;

import at.fhooe.mc.lbcas.contextruleparser.*;
import java.util.*;
import java.text.*;

@SuppressWarnings("all")
public class ContextRuleParser
{

}PARSER_END(ContextRuleParser)
/**
Tokens to be skipped
**/SKIP :{  " "| "\r"| "\t"| "\n"}
/**
 OPERATORS - COMPARISON
 **/TOKEN : {  < GREATER : ">" >
	{		System.out.println("GREATER THAN OPERATOR \" > \" ");
	}
| < LESS : "<" >
	{
		System.out.println("LESS THAN OPERATOR \" < \" ");
	}
| < EQUAL : "==" >
	{
		System.out.println("EQUAL OPERATOR \" == \" ");
	}
| < NOTEQUAL : "!=" >
	{
		System.out.println("NOT EQUAL OPERATOR \" != \" ");
	}
}
/**
 OPERATORS - LOGICAL
 **/
TOKEN : 
{
  < AND : "&&" >
	{
		System.out.println("LOGICAL AND OPERATOR \" && \" ");
	}
| < OR : "||" >
	{
		System.out.println("LOGICAL OR OPERATOR \" || \" ");
	}
}

/**
OPERATORS - OPENING CLOSING BRACKETS
**/
TOKEN :
{
	< OPENING_BRACKET : "(" >
	{
	System.out.println("(");
	}
|	< CLOSING_BRACKET : ")" >
	{
		System.out.println(")");
	}
|	< COMMA : "," >
	{
		System.out.println(",");
	}	
}

/**
VARIABLES - SPECIFIC TO RULES
**/
TOKEN :
{
	< POSITION_NOW : "position_now" >
	{	System.out.println("Current Position");
	}
|	< DAYNIGHT_MODE : "daynight_mode" >
	{		System.out.println("Day Night Mode");
	}
|	< LANGUAGE_MODE : "language_mode" >
	{
		System.out.println("Language Mode");
	}
| 	< TIME_NOW : "time_now" >
	{
  		System.out.println("Time now");
	}
| 	< TEMPERATURE_NOW : "temperature_now" >
	{
  		System.out.println("Temperature Now");
	}
}

/**
CONSTANT - SPECIFIC TO RULES
**/TOKEN :{
  < UNIVERSITY_CAMPUS : "UNIVERSITY_CAMPUS" >
  {	System.out.println("Position : UNIVERSITY_CAMPUS");
  }
| < DAY : "DAY" >
  {
	System.out.println("Day Night Mode is : DAY");
  }
| < NIGHT : "NIGHT" >
  {
	System.out.println("Day Night Mode is : NIGHT");
  }
| < ENGLISH : "ENGLISH" >
  {
	System.out.println("Language Mode : ENGLISH");
  }
| < GERMAN : "GERMAN" >
  {
	System.out.println("Language Mode : GERMAN");
  }
| < AM : "AM" >
  {
	System.out.println("Time Unit: AM");
  }
| < PM : "PM" >
  {
	System.out.println("Time Unit: PM");
  }
| < DECIMAL : "DECIMAL" >
  {
	System.out.println("Decimal : \" . \" ");
  }
}

/**
CONSTANT - NUMBERS
**/
TOKEN :
{  < TIMECONSTANT : (["0"-"1"] ["0"-"9"] | ["2"]["0"-"3"])
  				   (":")
  				   (["0"-"5"] ["0"-"9"])
  				   >
  {    System.out.println("Time Constant : " );
  }  				   
| < TEMPERATURECONSTANT : (["0"-"9"] | ["0"-"9"]["0"-"9"] | ["0"-"9"]["0"-"9"]["0"]) >
| < NUMBERZERO : ["0"] >
| < NUMBERONE : ["1"] >
| < NUMBERTWO : ["2"] >
| < NUMBERTHREE : ["3"] >
| < NUMBERFOUR : ["4"] >
| < NUMBERFIVE : ["5"] >
| < NUMBERSIX : ["6"] >
| < NUMBERSEVEN : ["7"] >
| < NUMBEREIGHT : ["8"] >
| < NUMBERNINE : ["9"] >

}TreeNode execute() :{
  TreeNode nodeA = null;
  TreeNode nodeB = null;
  TreeNode nodeC = null;
  TreeNode nodeD = null;
  TreeNode intermediateFirstNode = null;
  TreeNode intermediateSecondNode = null;
  TreeNode rootNode = null;
}{
  nodeA = variable_node_statement()
  rootNode = comparison_statement()
  nodeB = constant_node_statement()
  {
    rootNode.setChildNodes(new TreeNode[]{nodeA,nodeB});
    rootNode.setRoot(rootNode);
    return rootNode;
  }
|
  rootNode = logical_node_statement()

  < OPENING_BRACKET >
  nodeA = variable_node_statement()
  intermediateFirstNode = comparison_statement()
  nodeB = constant_node_statement()
  < COMMA >
  nodeC = variable_node_statement()
  intermediateSecondNode = comparison_statement()
  nodeD = constant_node_statement()
  < CLOSING_BRACKET >
  {
    intermediateFirstNode.setChildNodes(new TreeNode[]{nodeA,nodeB});
    intermediateFirstNode.setRoot(intermediateFirstNode);
    
    intermediateSecondNode.setChildNodes(new TreeNode[]{nodeC,nodeD});
    intermediateSecondNode.setRoot(intermediateSecondNode);
    
    rootNode.setChildNodes(new TreeNode[]{intermediateFirstNode,intermediateSecondNode});
    rootNode.setRoot(rootNode);
    
    return rootNode;
  }
}

/******************************************************* Variable Nodes ********************************************************************/

TreeNode variable_node_statement() :
{
  Token variableToken = null;
}
{  variableToken = < POSITION_NOW >  {    return new PositionNowVariableNode();
  }
|
  variableToken = < DAYNIGHT_MODE >
  {
    return new DayNightModeVariableNode();
  }
|
  variableToken = < LANGUAGE_MODE >
  {
    return new NationalityLanguageVariableNode();
  }
|
  variableToken = < TIME_NOW >
  {
    return new TimeNowVariableNode();
  }
|
  variableToken = < TEMPERATURE_NOW >
  {
    return new TemperatureNowVariableNode();
  }
}
/******************************************************* Variable Nodes ********************************************************************/

/******************************************************* Comparison Nodes ********************************************************************/
TreeNode comparison_statement() :{
  TreeNode node = null;
}{
 node = equalto() {return node; }
|
 node = notequalto() {return node; }
|
 node = greaterthan() {return node; }
| 
 node = lessthan() {return node; }
} 
ComparisonEqualNode equalto() :
{
  Token token;}
{    token = < EQUAL >
  {
    ComparisonEqualNode comparisonNode = new ComparisonEqualNode();
    return comparisonNode;
  }
}

ComparisonNotEqualNode notequalto() :
{
  Token token;
}
{
    token = < NOTEQUAL >
  {
    ComparisonNotEqualNode comparisonNode = new ComparisonNotEqualNode();
    return comparisonNode;
  }
}

ComparisonGreaterNode greaterthan() :
{
  Token token;
}
{
    token = < GREATER >
  {
    ComparisonGreaterNode comparisonNode = new ComparisonGreaterNode();
    return comparisonNode;
  }
}


ComparisonLessNode lessthan() :
{
  Token token;
}
{
    token = < LESS >
  {
    ComparisonLessNode comparisonNode = new ComparisonLessNode();
    return comparisonNode;
  }
}

/******************************************************* Comparison Nodes ********************************************************************/
 

/******************************************************* Constant Nodes ********************************************************************/ConstantNode constant_node_statement() :
{
  Token token = null;
  ConstantNode constantNode = null;
  String time = null;  
}
{
  token = constanttoken()
  {
    constantNode = new ConstantNode();
    constantNode.setValueForNode(token.image);
    return constantNode;
  }
| 
  token = < TIMECONSTANT >
  {	time = token.image;
	try	{
	    SimpleDateFormat df = new SimpleDateFormat("HH:mm");
	    Date date = df.parse(time);
	    constantNode = new ConstantNode();
	    constantNode.setValueForNode(date);
	    System.out.println(date);
	    return constantNode;
	}
	catch(Exception exception)	{	  exception.printStackTrace();
	}
  }
|
	token = temperatureconstant()
	{	  Integer temperature = Integer.parseInt(token.image);
	  constantNode = new ConstantNode();
	  constantNode.setValueForNode(temperature);
	  return constantNode;
	}
}

Token constanttoken() :{
  Token token = null;
}
{  token = < UNIVERSITY_CAMPUS >
  {    return token;
  }
|
  token =   < DAY > 
  {
    return token;
  }
|   token = < NIGHT > 
  {
    return token;
  }
|   token =  < GERMAN >
  {
    return token;
  }
|   token =  < ENGLISH >
  {
    return token;
  }  
}

Token temperatureconstant() :
{  Token token = null;
}
{  token = < TEMPERATURECONSTANT >
  {    return token;
  }
}

Token allNumbersOneOccurrence() :
{
  Token token = null;
}
{
	 token = <NUMBERZERO > | <NUMBERONE> | < NUMBERTWO > | < NUMBERTHREE > | < NUMBERFOUR > | <NUMBERFIVE> | < NUMBERSIX > | < NUMBERSEVEN > | < NUMBEREIGHT > | < NUMBERNINE >
	{	   return token;
	}
}

/******************************************************* Constant Nodes ********************************************************************/


/******************************************************* Logical Nodes ********************************************************************/  

TreeNode logical_node_statement() :
{  Token token = null;
  TreeNode logicalNode = null;
}{	token = < AND >
	{		logicalNode = new LogicalNodeAnd();
		return logicalNode;	
	}
|

	token = < OR >
	{
		logicalNode = new LogicalNodeOr();
		return logicalNode;	
	}
}


/******************************************************* Logical Nodes ********************************************************************/